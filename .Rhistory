unique_vals <- df$shape %>% table()
# Sort the counts of shapes in descending order and get the names
unique_vals %>% sort(decreasing = T) %>% names()
# Store column names in a vector
column_names <- names(df)
# Total number of rows in the dataset
n_total <- nrow(df)
# Loop over each column to get basic summary stats
for(col in column_names) {
values <- df[[col]];        # Extract column
n_na <- sum(is.na(values))  # Count number of NA values
unique_vals <- values %>% table() %>% sort(decreasing = T)  # Count unique values and sort them by frequency
n_unique <- length(unique_vals)
cat(sprintf("%s:\n", col))  # Print column name
cat(sprintf("\tnumber of NA values %d (%0.2f %%)\n", n_na, 100*n_na/n_total)) # Print number and percent of NA values
if(n_unique < 150) cat(sprintf("\t\t%s\n", names(unique_vals) %>% paste(collapse=", "))) # If column has fewer than 150 unique values, print them all
cat(sprintf("\tnumber of unique values %d (%0.2f %%)\n", length(unique_vals), # Print number and percent of unique values
100*length(unique_vals)/n_total))
}
# Count number of reports per state and sort ascending
df %>% group_by(state) %>% tally() %>% arrange(n)
# Extract the 'occurred' column as a vector
df %>% pull(occurred)
# Helper function: nth(n) returns a function that extracts the nth element of a vector
nth <- function(n) function(a) a[n]
# Custom function to parse date strings by splitting on - / space : characters
parse_date <- function(s){
space_split <- s %>% str_split("[-/ :]")
tibble(d1 = Map(nth(1), space_split) %>% as.character(),
d2 = Map(nth(2), space_split) %>% as.character(),
d3 = Map(nth(3), space_split) %>% as.character(),
d4 = Map(nth(4), space_split) %>% as.character(),
d5 = Map(nth(5), space_split) %>% as.character())
}
# Apply the parsing function to the 'occurred' column
date_stuff <- parse_date(df %>% pull(occurred))
head(date_stuff, 10)
# Histogram of the second component of the split date (likely month)
ggplot (date_stuff, aes(d2))+ geom_bar() + labs(x = "Month", y = "Count")
# Install and load the skimr package for a nicer summary
library(skimr)
# Quick summary of the dataset
skim_output <- skimr::skim(df)
# Count occurrences for categorical columns
df %>% count(country, sort = TRUE)
df %>% count(state, sort = TRUE)
df %>% count(shape, sort = TRUE)
# Convert 'occurred' and 'reported' to proper date-time format using lubridate
df <- df %>%
mutate(
occurred = lubridate::mdy_hm(occurred, quiet = TRUE),
reported = lubridate::mdy_hm(reported, quiet = TRUE)
)
# Plot UFO sightings per year
df %>%
filter(!is.na(occurred)) %>%
count(year = lubridate::year(occurred)) %>%
ggplot(aes(year, n)) +
geom_line() +
labs(title = "UFO Sightings per Year", x = "Year", y = "Number of Reports")
# Set threshold for "low number of unique values"
threshold <- 100
# Step 1: Find low-cardinality columns
low_cols <- df %>%
summarise(across(everything(), ~ n_distinct(.))) %>%
pivot_longer(everything(), names_to = "column", values_to = "unique_count") %>%
filter(unique_count < threshold)
# Step 2: For each of those columns, list the unique values in ascending order
low__values <- map_df(
low__cols$column,
function(colname) {
values <- df %>%
select(all_of(colname)) %>%
distinct() %>%
arrange(across(everything())) %>%
mutate(column = colname) %>%
rename(value = 1)
return(values)
}
View(low_cols)
View(low_cols)
# Set threshold for "low number of unique values"
threshold <- 100
# finding
low_cols <- df %>%
summarise(across(everything(), ~ n_distinct(.))) %>%
pivot_longer(everything(), names_to = "column", values_to = "unique_count") %>%
filter(unique_count < threshold)
# list the unique values in ascending order
low_values <- map_df(
low_cols$column,
function(colname) {
values <- df %>%
select(all_of(colname)) %>%
distinct() %>%
arrange(across(everything())) %>%
mutate(column = colname) %>%
rename(value = 1)
return(values)
}
print(low_values)
# Set threshold for "low number of unique values"
threshold <- 100
# finding
low_cols <- df %>%
summarise(across(everything(), ~ n_distinct(.))) %>%
pivot_longer(everything(), names_to = "column", values_to = "unique_count") %>%
filter(unique_count < threshold)
# list the unique values in ascending order
low_values <- map_df(
low_cols$column,
function(colname) {
values <- df %>%
select(all_of(colname)) %>%
distinct() %>%
arrange(across(everything())) %>%
mutate(column = colname) %>%
rename(value = 1)
return(values)
}
print("low_values"")
print(low_values)
threshold <- 100
# finding
low_cols <- df %>%
summarise(across(everything(), ~ n_distinct(.))) %>%
pivot_longer(everything(), names_to = "column", values_to = "unique_count") %>%
filter(unique_count < threshold)
# list the unique values in ascending order
low_values <- map_df(
low_cols$column,
function(colname) {
values <- df %>%
select(all_of(colname)) %>%
distinct() %>%
arrange(across(everything())) %>%
mutate(column = colname) %>%
rename(value = 1)
return(values)
}
print(low_values)
low_values <- map_df(
low_cols$column,
function(colname) {
values <- df %>%
select(all_of(colname)) %>%
distinct() %>%
arrange(across(everything())) %>%
mutate(column = colname) %>%
rename(value = 1)
return(values)
print(low_values)
}
low_values <- map_df(
low_values <- map_df(
low_cols$column,
function(colname) {
values <- df %>%
select(all_of(colname)) %>%
distinct() %>%
arrange(across(everything())) %>%
mutate(column = colname) %>%
rename(value = 1)
return(values)
}
# list the unique values in ascending order
low_values <- map_df(
low_values <- map_df(
low_cols$column,
function(colname) {
values <- df %>%
select(all_of(colname)) %>%
distinct() %>%
arrange(across(everything())) %>%
mutate(column = colname) %>%
rename(value = 1)
return(values)
}
)
threshold <- 100
# finding
low_cols <- df %>%
summarise(across(everything(), ~ n_distinct(.))) %>%
pivot_longer(everything(), names_to = "column", values_to = "unique_count") %>%
filter(unique_count < threshold)
# list the unique values in ascending order
low_values <- map_df(
low_cols$column,
function(colname) {
values <- df %>%
select(all_of(colname)) %>%
distinct() %>%
mutate(across(everything(), as.character)) %>%
arrange(across(everything())) %>%
mutate(column = colname) %>%
rename(value = 1)
return(values)
}
)
print(low_values)
View(low_values)
View(low_values)
View(df)
View(df)
View(df)
# Count UFO sightings by state (US states only) and filter states with more than 1 sighting
ufo_by_state <- df %>%
filter(nchar(state) == 2, str_detect(state, "^[A-Z]{2}$")) %>%  # Filter valid US state codes (2 uppercase letters)
group_by(state) %>%
tally(name = "sightings") %>%
filter(sightings > 1) %>%
arrange(desc(sightings))
# Plot
ggplot(ufo_by_state, aes(x = reorder(state, sightings), y = sightings)) +
geom_col(fill = "dodgerblue") +
coord_flip() +
labs(
title = "Number of UFO Sightings by U.S. State",
x = "State",
y = "Number of Sightings"
) +
theme_minimal()
ufo_by_state <- df %>%
filter(nchar(state) == 2, str_detect(state, "^[A-Z]{2}$")) %>%  # Filter valid US state codes (2 uppercase letters)
group_by(state) %>%
tally(name = "sightings") %>%
filter(sightings > 1) %>%
arrange(desc(sightings))
# counting UFO sightings by state, filtering out states that only have 1 observation
ufo_by_state <- df %>%
filter(nchar(state) == 2, str_detect(state, "^[A-Z]{2}$")) %>%  # Filter valid US state codes (2 uppercase letters)
group_by(state) %>%
tally(name = "sightings") %>%
filter(sightings > 1) %>%
arrange(desc(sightings))
## Question 1
*For this question, you can either import these tables into R and do each join, or create the tables we expect to see in a Markdown cell.*
# Homework 04
For questions 2-6, please use hw4.zip, which contains a data base of patient/hopsital data.
# Homework 04
For questions 2-6, please use hw4.zip, which contains a data base of patient/hopsital data.
library(tidyverse)
table_a <- tibble(
SKU = c(102345, 104567, 108912, 109876, 112233),
Fruit = c("Apple", "Orange", "Mango", "Blueberry", "Watermelon"),
Color = c("Red", "Orange", "Yellow", "Blue", "Green"),
Price = c(1.20, 1.40, 1.70, 3.50, 4.40),
In_Stock = c("Yes", "Yes", "No", "Yes", "No")
)
table_b <- tibble(
SKU = c(102345, 105432, 106789, 104567, 107654),
Fruit = c("Apple", "Banana", "Grape", "Orange", "Pear"),
Color = c("Red", "Yellow", "Purple", "Orange", "Green"),
Sale_Price = c(1.00, 0.50, 2.00, 1.20, 1.10),
Number_in_Stock = c(50, 120, 0, 75, 0)
)
── [1mAttaching core tidyverse packages[22m ──────────────────────── tidyverse 2.0.0 ──
install.packages("skimr")
# Load UFO sightings data from a GitHub CSV
df <- read_csv("https://raw.githubusercontent.com/Vincent-Toups/bios512/refs/heads/main/nuforc_workshop/nuforc_sightings.csv")
# Read column names
names(df)
# Count the occurrences of each unique 'shape' value
unique_vals <- df$shape %>% table()
# Sort the counts of shapes in descending order and get the names
unique_vals %>% sort(decreasing = T) %>% names()
# Store column names in a vector
column_names <- names(df)
# Total number of rows in the dataset
n_total <- nrow(df)
# Loop over each column to get basic summary stats
for(col in column_names) {
values <- df[[col]];        # Extract column
n_na <- sum(is.na(values))  # Count number of NA values
unique_vals <- values %>% table() %>% sort(decreasing = T)  # Count unique values and sort them by frequency
n_unique <- length(unique_vals)
cat(sprintf("%s:\n", col))  # Print column name
cat(sprintf("\tnumber of NA values %d (%0.2f %%)\n", n_na, 100*n_na/n_total)) # Print number and percent of NA values
if(n_unique < 150) cat(sprintf("\t\t%s\n", names(unique_vals) %>% paste(collapse=", "))) # If column has fewer than 150 unique values, print them all
cat(sprintf("\tnumber of unique values %d (%0.2f %%)\n", length(unique_vals), # Print number and percent of unique values
100*length(unique_vals)/n_total))
}
# Count number of reports per state and sort ascending
df %>% group_by(state) %>% tally() %>% arrange(n)
# Extract the 'occurred' column as a vector
df %>% pull(occurred)
# Helper function: nth(n) returns a function that extracts the nth element of a vector
nth <- function(n) function(a) a[n]
# Custom function to parse date strings by splitting on - / space : characters
parse_date <- function(s){
space_split <- s %>% str_split("[-/ :]")
tibble(d1 = Map(nth(1), space_split) %>% as.character(),
d2 = Map(nth(2), space_split) %>% as.character(),
d3 = Map(nth(3), space_split) %>% as.character(),
d4 = Map(nth(4), space_split) %>% as.character(),
d5 = Map(nth(5), space_split) %>% as.character())
}
# Apply the parsing function to the 'occurred' column
date_stuff <- parse_date(df %>% pull(occurred))
head(date_stuff, 10)
# Histogram of the second component of the split date (likely month)
ggplot (date_stuff, aes(d2))+ geom_bar() + labs(x = "Month", y = "Count")
# Install and load the skimr package for a nicer summary
library(skimr)
# Quick summary of the dataset
skim_output <- skimr::skim(df)
# Count occurrences for categorical columns
df %>% count(country, sort = TRUE)
df %>% count(state, sort = TRUE)
df %>% count(shape, sort = TRUE)
# Convert 'occurred' and 'reported' to proper date-time format using lubridate
df <- df %>%
mutate(
occurred = lubridate::mdy_hm(occurred, quiet = TRUE),
reported = lubridate::mdy_hm(reported, quiet = TRUE)
)
# Plot UFO sightings per year
df %>%
filter(!is.na(occurred)) %>%
count(year = lubridate::year(occurred)) %>%
ggplot(aes(year, n)) +
geom_line() +
labs(title = "UFO Sightings per Year", x = "Year", y = "Number of Reports")
For the columns that have a low (relative to this dataset, which has ~150,000 observation) number of unique values, create a table that lists these unique values in ascending order.
##For the columns that have a low (relative to this dataset, which has ~150,000 observation) number of unique values, create a table that lists these unique values in ascending order.
# Set threshold for "low number of unique values"
threshold <- 100
# finding
low_cols <- df %>%
summarise(across(everything(), ~ n_distinct(.))) %>%
pivot_longer(everything(), names_to = "column", values_to = "unique_count") %>%
filter(unique_count < threshold)
# list the unique values in ascending order
low_values <- map_df(
low_cols$column,
function(colname) {
values <- df %>%
select(all_of(colname)) %>%
distinct() %>%
mutate(across(everything(), as.character)) %>%
arrange(across(everything())) %>%
mutate(column = colname) %>%
rename(value = 1)
return(values)
}
)
print(low_values)
## Question 8
##Make a plot of number of UFO sightings by state (United States only). You can filter out states that only have one observation.
# counting UFO sightings by state, filtering out states that only have 1 observation
ufo_by_state <- df %>%
filter(nchar(state) == 2, str_detect(state, "^[A-Z]{2}$")) %>%  # Filter valid US state codes (2 uppercase letters)
group_by(state) %>%
tally(name = "sightings") %>%
filter(sightings > 1) %>%
arrange(desc(sightings))
# actual plot
ggplot(ufo_by_state, aes(x = reorder(state, sightings), y = sightings)) +
geom_col(fill = "dodgerblue") +
coord_flip() +
labs(
title = "Number of UFO Sightings by U.S. State",
x = "State",
y = "Number of Sightings"
) +
theme_minimal()
View(df)
library(tidyverse)
library(Rtsne)
install.packages(Rtsne)
install.packages("Rtsne"")
library(tidyverse)
library(Rtsne)
wine <- read_csv("/Users/ssagar/Desktop/UNC/BIOS512/BIOS512_assignments")
wine <- read_csv("/Users/ssagar/Desktop/UNC/BIOS512/BIOS512_assignments/wine.csv")
glimpse(wine)
summary(wine)
library(dplyr)
wine_scaled <- wine %>%
mutate(across(.cols = -class, .fns = ~ as.numeric(scale(.x))))
summary(wine_scaled)
pca <- prcomp(wine_scaled);
pca
summary(pca);
rotation_matrix <- solve(pca$rotation); # pca$rotation is the rotation matrix
d_rotation_matrix <- wine_scaled %>% mutate(xp = R[1,1]*x + R[1,2]*y,
yp = R[2,1]*x + R[2,2]*y) %>%
select(-x,-y) %>% rename(x=xp, y=yp);
R <- solve(r$rotation); # r$rotation is the rotation matrix
r <- prcomp(wine_scaled);
r
summary(r);
R <- solve(r$rotation); # r$rotation is the rotation matrix
dr <- d %>% mutate(xp = R[1,1]*x + R[1,2]*y,
yp = R[2,1]*x + R[2,2]*y) %>%
select(-x,-y) %>% rename(x=xp, y=yp);
R <- solve(r$rotation);
dr <- d %>% mutate(xp = R[1,1]*x + R[1,2]*y,
yp = R[2,1]*x + R[2,2]*y) %>%
select(-x,-y) %>% rename(x=xp, y=yp);
R <- solve(r$rotation);
dr <- wine_scaled %>% mutate(xp = R[1,1]*x + R[1,2]*y,
yp = R[2,1]*x + R[2,2]*y) %>%
select(-x,-y) %>% rename(x=xp, y=yp);
R <- solve(r$rotation);
dr <- wine_scaled %>% mutate(xp = R[1,1]*x + R[1,2]*y, yp = R[2,1]*x + R[2,2]*y) %>%
select(-x,-y) %>% rename(x=xp, y=yp);
install.packages("Rtsne"")
library(tidyverse)
library(Rtsne)
library(dplyr)
R <- solve(r$rotation);
dr <- wine_scaled %>% mutate(xp = R[1,1]*x + R[1,2]*y, yp = R[2,1]*x + R[2,2]*y) %>% select(-x,-y) %>% rename(x=xp, y=yp);
print(ggplot(dr,aes(x,y)) + geom_point() + coord_fixed());
install.packages("Rtsne"")
library(tidyverse)
library(Rtsne)
library(ggplot2)
set.seed(123)
pca_subset <- r %>%
select(PC1:PC10) %>%
mutate(class = wine_scaled$class)
pca_unique <- pca_subset %>% distinct()
# Only numeric columns go into T-SNE
tsne_input <- pca_unique %>% select(-class)
tsne_result <- Rtsne(tsne_input, dims = 2, perplexity = 30, verbose = TRUE, max_iter = 500)
tsne_df <- as.data.frame(tsne_result$Y)
colnames(tsne_df) <- c("TSNE1", "TSNE2")
tsne_df <- as.data.frame(tsne_result$Y)
set.seed(123)
pca_subset <- r %>%
select(PC1:PC10) %>%
mutate(class = wine_scaled$class)
set.seed(123)
pca_subset <- r %>% select(PC1:PC10) %>% mutate(class = wine_scaled$class)
library(tidyverse)
library(Rtsne)
install.packages("Rtsne"")
library(tidyverse)
library(Rtsne)
library(ggplot2)
wine <- read_csv("/Users/ssagar/Desktop/UNC/BIOS512/BIOS512_assignments/wine.csv")
wine <- read_csv("/Users/ssagar/Desktop/UNC/BIOS512/BIOS512_assignments/wine.csv")
glimpse(wine)
summary(wine)
library(dplyr)
wine_scaled <- wine %>%
mutate(across(.cols = -class, .fns = ~ as.numeric(scale(.x))))
summary(wine_scaled)
r <- prcomp(wine_scaled);
r
summary(r);
R <- solve(r$rotation);
dr <- wine_scaled %>% mutate(xp = R[1,1]*x + R[1,2]*y, yp = R[2,1]*x + R[2,2]*y) %>% select(-x,-y) %>% rename(x=xp, y=yp);
set.seed(123)
pca_subset <- r %>% select(PC1:PC10) %>% mutate(class = wine_scaled$class)
set.seed(123)
pca_scores <- as.data.frame(r$x[, 1:10])
pca_scores$class <- wine_scaled$class
pca_unique <- pca_subset %>% distinct()
pca_unique <- pca_scores %>% distinct()
tsne_input <- pca_unique %>% select(-class)
tsne_result <- Rtsne(tsne_input, dims = 2, perplexity = 30, verbose = TRUE, max_iter = 500)
install.packages("Rtsne")
library(tidyverse)
library(Rtsne)
library(ggplot2)
library(dplyr)
set.seed(123)
pca_scores <- as.data.frame(r$x[, 1:10])
pca_scores$class <- wine_scaled$class
pca_unique <- pca_scores %>% distinct()
# Only numeric columns go into T-SNE
tsne_input <- pca_unique %>% select(-class)
tsne_result <- Rtsne(tsne_input, dims = 2, perplexity = 30, verbose = TRUE, max_iter = 500)
tsne_df <- as.data.frame(tsne_result$Y)
colnames(tsne_df) <- c("TSNE1", "TSNE2")
tsne_df$class <- pca_unique$class
ggplot(tsne_df, aes(x = TSNE1, y = TSNE2, color = class)) +
geom_point(alpha = 0.7) +
labs(title = "T-SNE on PCA (PC1–PC10)", x = "TSNE 1", y = "TSNE 2") +
theme_minimal()
library(tibble)
tsne_df <- as_tibble(tsne_result$Y) %>% mutate(class = pca_unique$class)
ggplot(tsne_df, aes(x = V1, y = V2, color = factor(class))) +
geom_point(alpha = 0.7) +
labs(
title = "T-SNE Results (2D)",
x = "T-SNE 1",
y = "T-SNE 2",
color = "Class"
) + theme_minimal()
colnames(tsne_result$Y) <- c("TSNE1", "TSNE2")
tsne_df <- as_tibble(tsne_result$Y) %>% mutate(class = pca_unique$class)
ggplot(tsne_df, aes(x = V1, y = V2, color = factor(class))) +
geom_point(alpha = 0.7) +
labs(
title = "T-SNE Results (2D)",
x = "T-SNE 1",
y = "T-SNE 2",
color = "Class"
) + theme_minimal()
colnames(tsne_result$Y) <- c("TSNE1", "TSNE2")
tsne_df <- as_tibble(tsne_result$Y) %>% mutate(class = pca_unique$class)
ggplot(tsne_df, aes(x = TSNE1, y = TSNE2, color = factor(class))) +
geom_point(alpha = 0.7) +
labs(
title = "T-SNE Results (2D)",
x = "T-SNE 1",
y = "T-SNE 2",
color = "Class"
) + theme_minimal()
