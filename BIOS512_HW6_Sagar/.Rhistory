invisible({
suppressPackageStartupMessages(library(tidyverse))
# Get the data.
dialogs <- read_csv(
"https://raw.githubusercontent.com/Vincent-Toups/bios512/fcbc65a2696c7cff80d0f6ed1dd5c97abf0ef800/effective-visualization/source_data/tng.csv",
show_col_types = FALSE
)
head(dialogs, 10) # Showing first 10 observations
# Checkout the data.
names(dialogs)
dialogs %>% group_by(character) %>% tally() %>% arrange(desc(n))
dialogs %>% mutate(dialog_length=str_length(dialog)) %>% group_by(character) %>% summarize(mean_dialog_length = mean(dialog_length)) %>% arrange(desc(mean_dialog_length))
# Fix weird data.
dialogs %>% filter(character=="BEVERLY'S")
dialogs_fixed <- dialogs %>%
mutate(
character = str_replace_all(character, "'S.*$", ""),
character = str_replace_all(character, " VOICE", ""),
character = str_replace_all(character, "\\.", ""),
character = str_replace_all(character, "'", ""),
character = str_replace_all(character, "S COM", ""),
character = str_replace_all(character, " COM", ""),
dialog_length = str_length(dialog)
) %>%
filter(character %in% unlist(str_split("PICARD RIKER DATA TROI BEVERLY WORF WESLEY GEORDI", " ")))
dialogs_fixed %>% group_by(character) %>% summarize(mean_dialog_length = mean(dialog_length), std_dialog_length=sd(dialog_length)) %>% arrange(desc(mean_dialog_length))
dialog_len_per_ep <- dialogs_fixed %>% group_by(character, episode_number) %>% summarize(mean_dialog_length = mean(dialog_length), std_dialog_length=sd(dialog_length), .groups = "drop") %>% arrange(desc(mean_dialog_length))
dialog_len_per_ep
# Plot the data.
ggplot(dialogs_fixed) + geom_density(aes(x=dialog_length))
for_factor <- dialog_len_per_ep %>% group_by(character) %>% summarise(m=mean(mean_dialog_length)) %>% arrange(desc(m))
ggplot(dialog_len_per_ep, aes(factor(character,for_factor$character), mean_dialog_length)) + geom_boxplot()
dialog_len_per_ep <- dialogs_fixed %>%
group_by(character, episode_number) %>%
summarize(mean_dialog_length = mean(dialog_length), dialog_count=n(), .groups = "drop") %>%
arrange(desc(mean_dialog_length))
ggplot(dialog_len_per_ep, aes(dialog_count, mean_dialog_length)) + geom_point(aes(color=character)) + facet_wrap(~character)
})
ggplot(dialog_len_per_ep, aes(dialog_count, mean_dialog_length)) +
geom_point(aes(color=character)) +
facet_wrap(~character)
invisible({
suppressPackageStartupMessages(library(tidyverse))
# Get the data.
dialogs <- read_csv(
"https://raw.githubusercontent.com/Vincent-Toups/bios512/fcbc65a2696c7cff80d0f6ed1dd5c97abf0ef800/effective-visualization/source_data/tng.csv",
show_col_types = FALSE
)
head(dialogs, 10) # Showing first 10 observations
# Checkout the data.
names(dialogs)
dialogs %>% group_by(character) %>% tally() %>% arrange(desc(n))
dialogs %>% mutate(dialog_length=str_length(dialog)) %>% group_by(character) %>% summarize(mean_dialog_length = mean(dialog_length)) %>% arrange(desc(mean_dialog_length))
# Fix weird data.
dialogs %>% filter(character=="BEVERLY'S")
dialogs_fixed <- dialogs %>%
mutate(
character = str_replace_all(character, "'S.*$", ""),
character = str_replace_all(character, " VOICE", ""),
character = str_replace_all(character, "\\.", ""),
character = str_replace_all(character, "'", ""),
character = str_replace_all(character, "S COM", ""),
character = str_replace_all(character, " COM", ""),
dialog_length = str_length(dialog)
) %>%
filter(character %in% unlist(str_split("PICARD RIKER DATA TROI BEVERLY WORF WESLEY GEORDI", " ")))
dialogs_fixed %>% group_by(character) %>% summarize(mean_dialog_length = mean(dialog_length), std_dialog_length=sd(dialog_length)) %>% arrange(desc(mean_dialog_length))
dialog_len_per_ep <- dialogs_fixed %>% group_by(character, episode_number) %>% summarize(mean_dialog_length = mean(dialog_length), std_dialog_length=sd(dialog_length), .groups = "drop") %>% arrange(desc(mean_dialog_length))
dialog_len_per_ep
# Plot the data.
ggplot(dialogs_fixed) + geom_density(aes(x=dialog_length))
for_factor <- dialog_len_per_ep %>% group_by(character) %>% summarise(m=mean(mean_dialog_length)) %>% arrange(desc(m))
ggplot(dialog_len_per_ep, aes(factor(character,for_factor$character), mean_dialog_length)) + geom_boxplot()
dialog_len_per_ep <- dialogs_fixed %>%
group_by(character, episode_number) %>%
summarize(mean_dialog_length = mean(dialog_length), dialog_count=n(), .groups = "drop") %>%
arrange(desc(mean_dialog_length))
ggplot(dialog_len_per_ep, aes(dialog_count, mean_dialog_length)) + geom_point(aes(color=character)) + facet_wrap(~character)
})
ggplot(dialog_len_per_ep, aes(dialog_count, mean_dialog_length)) +
geom_point(aes(color=character)) +
facet_wrap(~character)
library(dplyr)
beverly_data <- dialogs_fixed %>%
filter(character == "Beverly",
episode_number >= 102 & episode_number <= 126 | episode_number >= 149 & episode_numer <= 174)
beverly_data <- dialogs_fixed %>%
filter(character == "Beverly",
episode_number >= 102 & episode_number <= 126 | episode_number >= 149 & episode_number <= 174)
beverly_data <- beverly_data %>%
mutate(season = case_when(
episode_number >= 102 & episode_number <= 126 ~ "Season 1",
episode_number >= 149 & episode_number <= 174 ~ "Season 3"
))
lines_per_episode <- beverly_data %>%
group_by(season, episode_number) %>%
summarize(mean_dialog_per_episode = n(), .groups = "drop")
mean_dialog_per_season <- lines_per_episode %>%
group_by(season) %>%
summarize(mean_dialog = mean(mean_dialog_per_episode), .groups = "drop")
print(mean_dialog_per_season)
beverly_data <- dialogs_fixed %>%
filter(character == "Beverly",
episode_number >= 102 & episode_number <= 126 | episode_number >= 149 & episode_number <= 174)
glimpse(dialogs_fixed)
beverly_data <- dialogs_fixed %>%
filter(character == "BEVERLY",
episode_number >= 102 & episode_number <= 126 | episode_number >= 149 & episode_number <= 174)
beverly_data <- beverly_data %>%
mutate(season = case_when(
episode_number >= 102 & episode_number <= 126 ~ "Season 1",
episode_number >= 149 & episode_number <= 174 ~ "Season 3"
))
lines_per_episode <- beverly_data %>%
group_by(season, episode_number) %>%
summarize(mean_dialog_per_episode = n(), .groups = "drop")
mean_dialog_per_season <- lines_per_episode %>%
group_by(season) %>%
summarize(mean_dialog = mean(mean_dialog_per_episode), .groups = "drop")
print(mean_dialog_per_season)
print(mean_dialog_per_episode)
beverly_data <- dialogs_fixed %>%
filter(character == "BEVERLY",
episode_number >= 102 & episode_number <= 126 | episode_number >= 149 & episode_number <= 174)
# adding season variable
beverly_data <- beverly_data %>%
mutate(season = case_when(
episode_number >= 102 & episode_number <= 126 ~ "Season 1",
episode_number >= 149 & episode_number <= 174 ~ "Season 3"
))
# counting lines per episode
lines_per_episode <- beverly_data %>%
group_by(season, episode_number) %>%
summarize(mean_dialog_per_episode = n(), .groups = "drop")
# calculating mean of means per season
mean_dialog_per_season <- lines_per_episode %>%
group_by(season) %>%
summarize(mean_dialog = mean(mean_dialog_per_episode), .groups = "drop")
print(mean_dialog_per_episode)
print(lines_per_episode)
print(mean_dialogue_per_season)
print(mean_dialog_per_season)
lines_per_episode <- beverly_data %>%
group_by(season, episode_number) %>%
summarize(mean_dialog_per_episode = n(), mean_dialogue_count = n(), .groups = "drop")
# calculating mean of means per season
mean_dialog_per_season <- lines_per_episode %>%
group_by(season) %>%
summarize(mean_dialog = mean(mean_dialog_per_episode), mean(mean_dialogue_count), .groups = "drop")
print(mean_dialog_per_season)
beverly_data <- dialog_len_per_ep %>%
filter(character == "BEVERLY",
episode_number >= 102 & episode_number <= 126 | episode_number >= 149 & episode_number <= 174)
# adding season variable
beverly_data <- beverly_data %>%
mutate(season = case_when(
episode_number >= 102 & episode_number <= 126 ~ "Season 1",
episode_number >= 149 & episode_number <= 174 ~ "Season 3"
))
# counting lines per episode
lines_per_episode <- beverly_data %>%
group_by(season, episode_number) %>%
summarize(mean_dialog_per_episode = n(), mean_dialogue_count = n(), .groups = "drop")
# calculating mean of means per season
mean_dialog_per_season <- lines_per_episode %>%
group_by(season) %>%
summarize(mean_dialog = mean(mean_dialog_per_episode), mean(mean_dialogue_count), .groups = "drop")
print(mean_dialog_per_season)
beverly_data <- dialog_len_per_ep %>%
filter(character == "BEVERLY",
episode_number >= 102 & episode_number <= 126 | episode_number >= 149 & episode_number <= 174)
# adding season variable
beverly_data <- beverly_data %>%
mutate(season = case_when(
episode_number >= 102 & episode_number <= 126 ~ "Season 1",
episode_number >= 149 & episode_number <= 174 ~ "Season 3"
))
# counting lines per episode
lines_per_episode <- beverly_data %>%
group_by(season, episode_number) %>%
summarize(mean_dialog_per_episode = n(), .groups = "drop")
# calculating mean of means per season
mean_dialog_per_season <- lines_per_episode %>%
group_by(season) %>%
summarize(mean_dialog = mean(mean_dialog_per_episode), .groups = "drop")
print(mean_dialog_per_season)
# Step 1: Filter for Beverly and relevant episodes
beverly_summary <- dialog_len_per_ep %>%
filter(character == "BEVERLY",
(episode_number >= 102 & episode_number <= 126) |
(episode_number >= 149 & episode_number <= 174)) %>%
# Step 2: Add season variable
mutate(season = case_when(
episode_number >= 102 & episode_number <= 126 ~ "Season 1",
episode_number >= 149 & episode_number <= 174 ~ "Season 3"
))
# Step 3: Group by season and get mean of means
beverly_means_by_season <- beverly_summary %>%
group_by(season) %>%
summarize(
mean_dialogue_count = mean(dialog_count),
mean_dialogue_length = mean(mean_dialog_length),
.groups = "drop"
)
# Step 4: View result
print(beverly_means_by_season)
# filtering for beverly and relevant episodes
beverly_summary <- dialog_len_per_ep %>%
filter(character == "BEVERLY",
(episode_number >= 102 & episode_number <= 126) |
(episode_number >= 149 & episode_number <= 174)) %>%
#adding season variable
mutate(season = case_when(
episode_number >= 102 & episode_number <= 126 ~ "Season 1",
episode_number >= 149 & episode_number <= 174 ~ "Season 3"
))
# grouping by season, getting mean of means
beverly_means_by_season <- beverly_summary %>%
group_by(season, episode_number) %>%
summarize(
mean_dialogue_count = mean(dialog_count),
mean_dialogue_length = mean(mean_dialog_length),
.groups = "drop"
)
# view result
print(beverly_means_by_season)
beverly_summary <- dialog_len_per_ep %>%
filter(character == "BEVERLY",
(episode_number >= 102 & episode_number <= 126) |
(episode_number >= 149 & episode_number <= 174)) %>%
#adding season variable
mutate(season = case_when(
episode_number >= 102 & episode_number <= 126 ~ "Season 1",
episode_number >= 149 & episode_number <= 174 ~ "Season 3"
))
# grouping by season, getting mean of means
beverly_means_by_season <- beverly_summary %>%
group_by(season) %>%
summarize(
mean_dialogue_count = mean(dialog_count),
mean_dialogue_length = mean(mean_dialog_length),
.groups = "drop"
)
# view result
print(beverly_means_by_season)
# grouping by season, getting mean of means
beverly_means_by_season <- beverly_summary %>%
group_by(season, episode_number) %>%
summarize(
mean_dialogue_count = mean(dialog_count),
mean_dialogue_length = mean(mean_dialog_length),
.groups = "drop"
)
# view result
print(beverly_means_by_season)
# grouping by season, getting mean of means
beverly_means_by_season <- beverly_summary %>%
group_by(season) %>%
summarize(
mean_dialogue_count = mean(dialog_count),
mean_dialogue_length = mean(mean_dialog_length),
.groups = "drop"
)
# view result
print(beverly_means_by_season)
tokens <- dialogs_fixed %>%
# Split each dialog into words
mutate(word_list = str_split(dialog, "\\s+")) %>%
# Unnest the list column so each word is a row
unnest(word_list) %>%
# Clean words
mutate(
word = str_remove_all(word_list, "[[:punct:]]"),  # Remove punctuation
word = str_to_lower(word)                         # Convert to lowercase
) %>%
# Remove empty strings and stopwords
filter(word != "", !word %in% STOPWORDS)
print(dialogs_fixed$dialog)
tokens <- dialogs_fixed %>%
# Split each dialog into words
mutate(word_list = str_split(dialog, "\\s+")) %>%
# Unnest the list column so each word is a row
unnest(word_list) %>%
# Clean words
mutate(
word = str_remove_all(word_list, "[[:punct:]]"),  # Remove punctuation
word = str_to_lower(word)                         # Convert to lowercase
) %>%
# Remove empty strings and stopwords
filter(word != "", !word %in% stop_words)
tokens <- dialogs_fixed %>%
# Split each dialog into words
mutate(word_list = str_split(dialog, "\\s+")) %>%
# Unnest the list column so each word is a row
unnest(word_list) %>%
# Clean words
mutate(
word = str_remove_all(word_list, "[[:punct:]]"),  # Remove punctuation
word = str_to_lower(word)                         # Convert to lowercase
) %>%
stop_words <- c(
"i","me","my","myself","we","our","ours","ourselves","you","your","yours","yourself",
"yourselves","he","him","his","himself","she","her","hers","herself","it","its","itself",
"they","them","their","theirs","themselves","what","which","who","whom","this","that",
"these","those","am","is","are","was","were","be","been","being","have","has","had",
"having","do","does","did","doing","a","an","the","and","but","if","or","because","as",
"until","while","of","at","by","for","with","about","against","between","into","through",
"during","before","after","above","below","to","from","up","down","in","out","on","off",
"over","under","again","further","then","once","here","there","when","where","why","how",
"all","any","both","each","few","more","most","other","some","such","no","nor","not",
"only","own","same","so","than","too","very","s","t","can","will","just","don","should","now"
)
tokens <- dialogs_fixed %>% mutate(word_list = str_split(dialog, "\\s+")) %>%
# Unnest the list column so each word is a row
unnest(word_list) %>%
# Clean words
mutate(
word = str_remove_all(word_list, "[[:punct:]]"),  # Remove punctuation
word = str_to_lower(word)                         # Convert to lowercase
) %>%
stop_words <- c(
"i","me","my","myself","we","our","ours","ourselves","you","your","yours","yourself",
"yourselves","he","him","his","himself","she","her","hers","herself","it","its","itself",
"they","them","their","theirs","themselves","what","which","who","whom","this","that",
"these","those","am","is","are","was","were","be","been","being","have","has","had",
"having","do","does","did","doing","a","an","the","and","but","if","or","because","as",
"until","while","of","at","by","for","with","about","against","between","into","through",
"during","before","after","above","below","to","from","up","down","in","out","on","off",
"over","under","again","further","then","once","here","there","when","where","why","how",
"all","any","both","each","few","more","most","other","some","such","no","nor","not",
"only","own","same","so","than","too","very","s","t","can","will","just","don","should","now"
)
tokens <- dialogs_fixed %>% mutate(word_list = str_split(dialog, "\\s+"))
%>% unnest(word_list) %>% mutate(
tokens <- dialogs_fixed %>% mutate(word_list = str_split(dialog, "\\s+"))
%>% unnest(word_list) %>% mutate(
tokens <- dialogs_fixed %>% mutate(word_list = str_split(dialog, "\\s+"))
%>% unnest(word_list) %>% mutate(word = str_remove_all(word_list, "[[:punct:]]"),
tokens <- dialogs_fixed %>% mutate(word_list = str_split(dialog, "\\s+")) %>% unnest(word_list) %>% mutate(word = str_remove_all(word_list, "[[:punct:]]"),
word = str_to_lower(word)) %>% stop_words <- c(
"i","me","my","myself","we","our","ours","ourselves","you","your","yours","yourself",
"yourselves","he","him","his","himself","she","her","hers","herself","it","its","itself",
"they","them","their","theirs","themselves","what","which","who","whom","this","that",
"these","those","am","is","are","was","were","be","been","being","have","has","had",
"having","do","does","did","doing","a","an","the","and","but","if","or","because","as",
"until","while","of","at","by","for","with","about","against","between","into","through",
"during","before","after","above","below","to","from","up","down","in","out","on","off",
"over","under","again","further","then","once","here","there","when","where","why","how",
"all","any","both","each","few","more","most","other","some","such","no","nor","not",
"only","own","same","so","than","too","very","s","t","can","will","just","don","should","now"
)
tokens <- dialogs_fixed %>% mutate(word_list = str_split(dialog, "\\s+")) %>%
unnest(word_list) %>% mutate(word = str_remove_all(word_list, "[[:punct:]]"),
word = str_to_lower(word)) %>% stop_words <- c(
"i","me","my","myself","we","our","ours","ourselves","you","your","yours","yourself",
"yourselves","he","him","his","himself","she","her","hers","herself","it","its","itself",
"they","them","their","theirs","themselves","what","which","who","whom","this","that",
"these","those","am","is","are","was","were","be","been","being","have","has","had",
"having","do","does","did","doing","a","an","the","and","but","if","or","because","as",
"until","while","of","at","by","for","with","about","against","between","into","through",
"during","before","after","above","below","to","from","up","down","in","out","on","off",
"over","under","again","further","then","once","here","there","when","where","why","how",
"all","any","both","each","few","more","most","other","some","such","no","nor","not",
"only","own","same","so","than","too","very","s","t","can","will","just","don","should","now"
)
stop_words <- c(
"i","me","my","myself","we","our","ours","ourselves","you","your","yours","yourself",
"yourselves","he","him","his","himself","she","her","hers","herself","it","its","itself",
"they","them","their","theirs","themselves","what","which","who","whom","this","that",
"these","those","am","is","are","was","were","be","been","being","have","has","had",
"having","do","does","did","doing","a","an","the","and","but","if","or","because","as",
"until","while","of","at","by","for","with","about","against","between","into","through",
"during","before","after","above","below","to","from","up","down","in","out","on","off",
"over","under","again","further","then","once","here","there","when","where","why","how",
"all","any","both","each","few","more","most","other","some","such","no","nor","not",
"only","own","same","so","than","too","very","s","t","can","will","just","don","should","now"
)
tokens <- dialogs_fixed %>%
# Split each dialog into words
mutate(word_list = str_split(dialog, "\\s+")) %>%
# Unnest the list column so each word is a row
unnest(word_list) %>%
# Clean words
mutate(
word = str_remove_all(word_list, "[[:punct:]]"),  # Remove punctuation
word = str_to_lower(word)                         # Convert to lowercase
) %>%
# Remove empty strings and stopwords
filter(word != "", !word %in% stop_words)
# summarizing total and unique words per character
vocab_summary <- tokens %>%
group_by(character) %>%
summarize(
total_words = n(),
unique_words = n_distinct(word),
vocabulary_richness = unique_words / total_words,
.groups = "drop"
) %>%
arrange(desc(vocabulary_richness))
print(vocab_summary)
library(ggplot2)
ggplot(vocab_summary, aes(x = total_words, y = vocabulary_richness)) +
geom_text(aes(label = character), size = 3, check_overlap = TRUE) +
labs(
title = "Vocabulary Richness vs Total Words Spoken",
x = "Total Words (Excluding Stopwords)",
y = "Vocabulary Richness (Unique Words / Total Words)"
) +
theme_minimal() +
theme(legend.position = "none")
wesley_counts <- dialogs_fixed %>%
filter(episode_number > 174, character == "WESLEY") %>%
count(episode_number, name = "wesley_lines")
print(wesley_counts)
exit_episode <- 176
# Filter to only Wesley's lines
wesley_lines <- dialogs_fixed %>%
filter(character == "WESLEY") %>%
select(episode_number, dialog) %>%
arrange(episode_number)
# Last line **before** he left as a main character
last_main_line <- wesley_lines %>%
filter(episode_number <= exit_episode) %>%
slice_tail(n = 1)
# Last line **ever**
last_ever_line <- wesley_lines %>%
slice_tail(n = 1)
# Print results
cat("Wesley’s LAST LINE as a main cast member (episode", last_main_line$episode_number, "):\n",
last_main_line$dialog, "\n\n")
cat("Wesley’s FINAL LINE ever on the show (episode", last_ever_line$episode_number, "):\n",
last_ever_line$dialog, "\n")
exit_episode <- 183
# Filter to only Wesley's lines
wesley_lines <- dialogs_fixed %>%
filter(character == "WESLEY") %>%
select(episode_number, dialog) %>%
arrange(episode_number)
# Last line **before** he left as a main character
last_main_line <- wesley_lines %>%
filter(episode_number <= exit_episode) %>%
slice_tail(n = 1)
# Last line **ever**
last_ever_line <- wesley_lines %>%
slice_tail(n = 1)
# Print results
cat("Wesley’s LAST LINE as a main cast member (episode", last_main_line$episode_number, "):\n",
last_main_line$dialog, "\n\n")
cat("Wesley’s FINAL LINE ever on the show (episode", last_ever_line$episode_number, "):\n",
last_ever_line$dialog, "\n")
char_order <- dialog_len_per_ep %>%
group_by(character) %>%
summarize(overall_mean_length = mean(mean_dialog_length), .groups = "drop") %>%
arrange(overall_mean_length) %>%
pull(character)
dialog_len_ordered <- dialog_len_per_ep %>%
mutate(character = factor(character, levels = char_order))
ggplot(dialog_len_ordered, aes(x = episode_number, y = character, fill = mean_dialog_length)) +
geom_tile() +
scale_fill_viridis_c(option = "plasma") +  # Optional, looks nice
labs(
title = "Mean Dialog Length per Episode by Character",
x = "Episode Number",
y = "Character",
fill = "Mean Dialog\nLength"
) +
theme_minimal()
print(vocab_summary)
char_order <- dialog_len_per_ep %>%
group_by(character) %>%
summarize(overall_mean_length = mean(mean_dialog_length), .groups = "drop") %>%
arrange(overall_mean_length) %>%
pull(character)
dialog_len_ordered <- dialog_len_per_ep %>%
mutate(character = factor(character, levels = rev(char_order)))
ggplot(dialog_len_ordered, aes(x = episode_number, y = character, fill = mean_dialog_length)) +
geom_tile() +
scale_fill_viridis_c(option = "plasma") +  # Optional, looks nice
labs(
title = "Mean Dialog Length per Episode by Character",
x = "Episode Number",
y = "Character",
fill = "Mean Dialog\nLength"
) +
theme_minimal()
# Filter to only Wesley's lines
wesley_lines <- dialogs_fixed %>%
filter(character == "WESLEY") %>%
select(episode_number, dialog) %>%
arrange(episode_number)
# Last line before wesley left as a main character
last_main_line <- wesley_lines %>%
filter(episode_number <= 183) %>%
slice_tail(n = 1)
# Last line ever
last_ever_line <- wesley_lines %>%
slice_tail(n = 1)
# Print results
cat("Wesley’s LAST LINE as a main cast member (episode", last_main_line$episode_number, "):\n",
last_main_line$dialog, "\n\n")
cat("Wesley’s FINAL LINE ever on the show (episode", last_ever_line$episode_number, "):\n",
last_ever_line$dialog, "\n")
library(dplyr)
library(ggplot2)
wesley_counts <- dialogs_fixed %>%
filter(episode_number > 174, character == "WESLEY") %>%
count(episode_number, name = "wesley_lines")
print(wesley_counts)
